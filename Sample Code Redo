*TO DO* 

1. Incorporate SD card
2. ESP2866
3. SPI Flash 
4. PID
5. UI

// Files to Include 
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_BMP280.h>
#include "GY521.h"

//Device Inputs Defined
#define BMP_SCK (*insert pin from KICAD*)
#define BMP_MISO (*insert pin from KICAD*)
#define BMP_MOSI (*insert pin from KICAD*)
#define BMP_CS (*insert pin from KICAD*)

Adafruit_BMP280 bmp; //I2C 
GY521 sensor(0x68);
uint32_t counter = 0;

int time = millis()

//define output pins to mosfet using https://dronebotworkshop.com/transistors-mosfets/
int pin1 = ;
int pin2 = ; 
int pin3 = ; 
//initialize them as pinmode(pin1, OUTPUT) in setup. AnalogWrite(pin1, command) to MOSFET

void setup() { 

    // BMP280
    Serial.begin(9600) // initializes serial connection at a baud rate of 9600 
    while (!Serial) delay(100); // Waits to establish connection via usb
    unsigned status;
    status = bmp.begin(); // initializes the bmp280 sensor and stores the success/fail result
    if (!status) {
        Serial.println(F("Could  not find valid BMP280 Sensor. Check wiring or try a different address!"));
        while (1) delay (10); //runs an infinite loop and requires manual reset to break out of the program
    }
    /* Default settings from datasheet. */
      bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */ // The sensor continuously measures pressure and temperature
                      Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */ //avergaes two temperatures
                      Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */ //averages sixteen pressures
                      Adafruit_BMP280::FILTER_X16,      /* Filtering. */ // sets digital low pass filter to a factor of 16 to reduce noise in sensor readings 
                      Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */ // Sensor enters standby mode of 500 ms before taking new readings 
    
    //GY521 
    Serial.begin(115200); // REMOVE IF NEEDED
    Wire.begin(); 
    while (sensor.wakeup() == false) 
      {   
        Serial.print(millis());
        Serial.println("\tCould not connect to GY521: please check the GY521 address (0x68/0x69)");
        delay(1000);
      }
    sensor.setAccelSensitivity(2);  //  8g
    sensor.setGyroSensitivity(1);   //  500 degrees/s
    
    sensor.setThrottle();
    Serial.println("start...");
    
    //  set calibration values from calibration sketch.
    sensor.axe = 0.574;
    sensor.aye = -0.002;
    sensor.aze = -1.043;
    sensor.gxe = 10.702;
    sensor.gye = -6.436;
    sensor.gze = -0.676;

}

void loop() {
    //BMP280
    Serial.print(F("Temperature = "));
    Serial.print(bmp.readTemperature());
    Serial.println(" *C");

    Serial.print(F("Pressure = "));
    Serial.print(bmp.readPressure());
    Serial.println(" Pa");

    Serial.print(F("Approx altitude = "));
    Serial.print(bmp.readAltitude(1013.25)); /* Adjusted to local forecast! */
    Serial.println(" m");

    Serial.println();
    delay(2000);

    //GY521
    sensor.read();
    float ax = sensor.getAccelX();
    float ay = sensor.getAccelY();
    float az = sensor.getAccelZ();
    float gx = sensor.getGyroX();
    float gy = sensor.getGyroY();
    float gz = sensor.getGyroZ();
    float t = sensor.getTemperature();
    
    if (counter % 10 == 0)
    {
    Serial.println("\n\tACCELEROMETER\t\tGYROSCOPE\t\tTEMPERATURE");
    Serial.println("\tax\tay\taz\tgx\tgy\tgz\tT");
    }
    
    Serial.print(counter);
    Serial.print('\t');
    Serial.print(ax, 3);
    Serial.print('\t');
    Serial.print(ay, 3);
    Serial.print('\t');
    Serial.print(az, 3);
    Serial.print('\t');
    Serial.print(gx, 3);
    Serial.print('\t');
    Serial.print(gy, 3);
    Serial.print('\t');
    Serial.print(gz, 3);
    Serial.print('\t');
    Serial.print(t, 3);
    Serial.println();
    
    counter++;
    delay(1000);

    double Inertia_&_Thrust(time) {
    //time in ms
    // check my math on this, I put the base equations in the notes
    //Inertia_difference is the difference between initial and final inertia
    //fuel fraction is the integral of the fuel used up, but it's not divided yet
    //we have to do that at the end which is why it is divided by 961.8 at end
    t = time/1000;
    fuel_fraction = 0;
    thrust = 0; 
    if t< .125 {
        fuel_fraction =  166 * pow(t,2)-1300*(pow(t,3)/3+pow(t,2)/8+t/64; 
        thrust = -1300(t+.125)^2+330+2x;
    }
    else if t < 2.125 {
        fuel_fraction = 1015/4 * t - 15 * pow(t,2) + 3.8567708333;
        thrust = 250 - 30(x-.125);
    }
    else if t < 3.5 {
        fuel_fraction = 51.271-t⋅(36t−1673)/8;
        thrust = 290-9(x-2.125);
    }
    else if t < 5.4 {
        fuel_fraction = -322.26 + 2113*t/5−35*pow(t,2);
        thrust = 177.6-70(x-3.5);
    }
    else if t < 6.4 {
        fuel_fraction = 56.813 + 223*t/5−44(pow(t,2)/2−27*t/5);
        thrust = 44.6-44(x-5.4);
    }
    else {
        fuel_fraction = 961.8;
        thrust = 0;
    }
    
    current_inertia = Inertia_difference * fuel_fraction/961.8  + Initial_inertia;
    return current_inertia;
    return thrust;
    }

    //Parachute Checking Conditions
     boolean checkParachute(altitude, velocity, acceleration) {
     boolean condition = false;
     if(velocity <= 0 && acceleration <= 20) {
         condition = true;
     }
     else if(altitude < prevaltitude && acceleration <= 20){
         condition = true;
     }
     return condition;
     }

     if (condition == true) {
     MOSFET COMMUNICATION
     }



} 
